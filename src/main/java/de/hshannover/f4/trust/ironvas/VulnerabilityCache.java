/*
 * #%L
 * =====================================================
 *   _____                _     ____  _   _       _   _
 *  |_   _|_ __ _   _ ___| |_  / __ \| | | | ___ | | | |
 *    | | | '__| | | / __| __|/ / _` | |_| |/ __|| |_| |
 *    | | | |  | |_| \__ \ |_| | (_| |  _  |\__ \|  _  |
 *    |_| |_|   \__,_|___/\__|\ \__,_|_| |_||___/|_| |_|
 *                             \____/
 * 
 * =====================================================
 * 
 * Hochschule Hannover
 * (University of Applied Sciences and Arts, Hannover)
 * Faculty IV, Dept. of Computer Science
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany
 * 
 * Email: trust@f4-i.fh-hannover.de
 * Website: http://trust.f4.hs-hannover.de
 * 
 * This file is part of ironvas, version 0.1.7, implemented by the Trust@HsH
 * research group at the Hochschule Hannover.
 * %%
 * Copyright (C) 2011 - 2016 Trust@HsH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package de.hshannover.f4.trust.ironvas;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Logger;

/**
 * The {@link VulnerabilityCache} manages a set of {@link Vulnerability}
 * objects.
 *
 * Each set of {@link Vulnerability} objects in the cache is associated with a
 * task id.
 *
 * @author Ralf Steuerwald
 *
 */
@SuppressWarnings("serial")
public class VulnerabilityCache extends HashMap<String, Set<Vulnerability>> {

	private static final Logger LOGGER = Logger
			.getLogger(VulnerabilityCache.class.getName());
	
	private HashMap<String,Integer> mIpOccurrence = new HashMap<String,Integer>();
	
    /**
     * Adds a set of {@link Vulnerability} objects to the cache. If the task id
     * for the new set is not present in the cache it is also added.
     *
     * @param taskId
     *            the task id from which the vulnerabilities are originated
     * @param x
     *            the set of vulnerabilities to add
     *            
     * @return a set of ip Addresses that can be published 
     */
    public Set<String> addToTask(String taskId, Collection<Vulnerability> x) {
        if (containsKey(taskId)) {
            get(taskId).addAll(x);
        } else {
            Set<Vulnerability> news = new HashSet<Vulnerability>();
            news.addAll(x);
            put(taskId, news);
        }
        
        Set<String> ipsToPublish = new HashSet<String>();
        
    	for (Vulnerability vul : x) {
    		if (!mIpOccurrence.containsKey(vul.getHost())){
    			mIpOccurrence.put(vul.getHost(), 1);
    			ipsToPublish.add(vul.getHost());
    		} else {
    			Integer tmpOccurrence = mIpOccurrence.get(vul.getHost());
    			tmpOccurrence++;
    			mIpOccurrence.put(vul.getHost(), tmpOccurrence);
    		}
        }
    	return ipsToPublish;
    }

    /**
     * Removes a set of vulnerabilities from the cache. If the task id is not
     * contained in the cache nothing happens.
     *
     * @param taskId
     *            the task from which the vulnerabilities will be removed
     * @param x
     *            the set of vulnerabilities to remove
     *            
     * @return a set of ip Addresses that can be deleted
     */
    public Set<String> removeFromTask(String taskId, Collection<Vulnerability> x) {
        if (containsKey(taskId)) {
            get(taskId).removeAll(x);
        }
        
        Set<String> ipsToDelete = new HashSet<String>();
        
        for (Vulnerability vul : x) {
	        if (!mIpOccurrence.containsKey(vul.getHost())){
				LOGGER.warning("error want to delete ip that doesnt exists");
			} else {
				Integer tmpOccurrence = mIpOccurrence.get(vul.getHost());
				tmpOccurrence--;
				if (tmpOccurrence == 0){
					mIpOccurrence.remove(vul.getHost());
					ipsToDelete.add(vul.getHost());
				} else {
					mIpOccurrence.put(vul.getHost(), tmpOccurrence);
				}
			}
        }
        return ipsToDelete;
    }

    /**
     * Returns a subset of vulnerabilities from x that may be out-dated. The set
     * of out-dated vulnerabilities is calculated in the following manner: every
     * object contained in the cache but not in x may be out-dated.
     *
     * Note: This method does NOT alter the cache content nor the content of x.
     *
     * @param taskId
     * @param x
     * @return
     */
    public Set<Vulnerability> indicateOutDated(String taskId,
            Collection<Vulnerability> x) {
        if (containsKey(taskId)) {
            // store the cache content in temp and remove all elements from x
            // (the most current ones) the remaining elements in temp may
            // be out-dated
            Set<Vulnerability> temp = new HashSet<Vulnerability>(get(taskId));
            temp.removeAll(x);
            return temp;
        } else {
            // no old vulnerabilities
            return new HashSet<Vulnerability>();
        }

    }

    /**
     * Returns a subset of vulnerabilities from x which are not known in the
     * cache.
     *
     * Note: This method does NOT alter the cache content nor the content of x.
     *
     * @param taskId
     * @param x
     * @return
     */
    public Set<Vulnerability> indicateNew(String taskId,
            Collection<Vulnerability> x) {
        if (containsKey(taskId)) {
            // store the elements of x in temp and remove all elements
            // from temp which are stored in the cache, the remaining elements
            // are new
            Set<Vulnerability> temp = new HashSet<Vulnerability>(x);
            temp.removeAll(get(taskId));
            return temp;
        } else {
            // all vulnerabilities are new
            return new HashSet<Vulnerability>(x);
        }
    }

    public boolean contains(String taskId, Vulnerability v) {
        if (!containsKey(taskId)) {
            return false;
        }
        return get(taskId).contains(v);
    }

    public int vulnerabilityCount() {
        int count = 0;
        for (Collection<Vulnerability> c : values()) {
            count += c.size();
        }
        return count;
    }    

}
