/*
 * #%L
 * =====================================================
 *   _____                _     ____  _   _       _   _
 *  |_   _|_ __ _   _ ___| |_  / __ \| | | | ___ | | | |
 *    | | | '__| | | / __| __|/ / _` | |_| |/ __|| |_| |
 *    | | | |  | |_| \__ \ |_| | (_| |  _  |\__ \|  _  |
 *    |_| |_|   \__,_|___/\__|\ \__,_|_| |_||___/|_| |_|
 *                             \____/
 * 
 * =====================================================
 * 
 * Hochschule Hannover
 * (University of Applied Sciences and Arts, Hannover)
 * Faculty IV, Dept. of Computer Science
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany
 * 
 * Email: trust@f4-i.fh-hannover.de
 * Website: http://trust.f4.hs-hannover.de
 * 
 * This file is part of ironvas, version 0.1.7, implemented by the Trust@HsH
 * research group at the Hochschule Hannover.
 * %%
 * Copyright (C) 2011 - 2016 Trust@HsH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package de.hshannover.f4.trust.ironvas;

import java.util.Date;

/**
 * This class contains informations related to a vulnerability detected by
 * OpenVAS.
 *
 * @author Ralf Steuerwald
 *
 */
public class Vulnerability {

    private final String mId;
    private Date mTimestamp;

    private final String mSubnet;
    private final String mHost;
    private final String mPort;

    private final ThreatLevel mThreat;
    private final String mDescription;

    private Nvt mNvt;

    public Vulnerability(String id, Date timestamp, String subnet, String host,
            String port, ThreatLevel threat, String description, Nvt nvt) {
        super();
        this.mId = id;
        this.mSubnet = subnet;
        this.mHost = host;
        this.mPort = port;
        this.mThreat = threat;
        this.mDescription = description;
        this.mNvt = nvt;

        this.mTimestamp = new Date(timestamp.getTime());
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + (mDescription == null ? 0 : mDescription.hashCode());
        result = prime * result + (mHost == null ? 0 : mHost.hashCode());
        result = prime * result + (mId == null ? 0 : mId.hashCode());
        result = prime * result + (mNvt == null ? 0 : mNvt.hashCode());
        result = prime * result + (mPort == null ? 0 : mPort.hashCode());
        result = prime * result + (mSubnet == null ? 0 : mSubnet.hashCode());
        result = prime * result + (mThreat == null ? 0 : mThreat.hashCode());
        result = prime * result
                + (mTimestamp == null ? 0 : mTimestamp.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
			return true;
		}
        if (obj == null) {
			return false;
		}
        if (getClass() != obj.getClass()) {
			return false;
		}
        Vulnerability other = (Vulnerability) obj;
        if (mDescription == null) {
            if (other.mDescription != null) {
				return false;
			}
        } else if (!mDescription.equals(other.mDescription)) {
			return false;
		}
        if (mHost == null) {
            if (other.mHost != null) {
				return false;
			}
        } else if (!mHost.equals(other.mHost)) {
			return false;
		}
        if (mId == null) {
            if (other.mId != null) {
				return false;
			}
        } else if (!mId.equals(other.mId)) {
			return false;
		}
        if (mNvt == null) {
            if (other.mNvt != null) {
				return false;
			}
        } else if (!mNvt.equals(other.mNvt)) {
			return false;
		}
        if (mPort == null) {
            if (other.mPort != null) {
				return false;
			}
        } else if (!mPort.equals(other.mPort)) {
			return false;
		}
        if (mSubnet == null) {
            if (other.mSubnet != null) {
				return false;
			}
        } else if (!mSubnet.equals(other.mSubnet)) {
			return false;
		}
        if (mThreat != other.mThreat) {
			return false;
		}
        if (mTimestamp == null) {
            if (other.mTimestamp != null) {
				return false;
			}
        } else if (!mTimestamp.equals(other.mTimestamp)) {
			return false;
		}
        return true;
    }

    public String getId() {
        return mId;
    }

    public Date getTimestamp() {
        return new Date(mTimestamp.getTime());
    }

    public String getSubnet() {
        return mSubnet;
    }

    public String getHost() {
        return mHost;
    }

    public String getPort() {
        return mPort;
    }

    public ThreatLevel getThreat() {
        return mThreat;
    }

    public String getDescription() {
        return mDescription;
    }

    public Nvt getNvt() {
        return mNvt;
    }

}
