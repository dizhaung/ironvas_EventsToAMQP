/*
 * #%L
 * =====================================================
 *   _____                _     ____  _   _       _   _
 *  |_   _|_ __ _   _ ___| |_  / __ \| | | | ___ | | | |
 *    | | | '__| | | / __| __|/ / _` | |_| |/ __|| |_| |
 *    | | | |  | |_| \__ \ |_| | (_| |  _  |\__ \|  _  |
 *    |_| |_|   \__,_|___/\__|\ \__,_|_| |_||___/|_| |_|
 *                             \____/
 * 
 * =====================================================
 * 
 * Hochschule Hannover
 * (University of Applied Sciences and Arts, Hannover)
 * Faculty IV, Dept. of Computer Science
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany
 * 
 * Email: trust@f4-i.fh-hannover.de
 * Website: http://trust.f4.hs-hannover.de
 * 
 * This file is part of ironvas, version 0.1.7, implemented by the Trust@HsH
 * research group at the Hochschule Hannover.
 * %%
 * Copyright (C) 2011 - 2016 Trust@HsH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package de.hshannover.f4.trust.ironvas;

import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;


public class VulnerabilityCacheTest {

    private final int mCount = 10;
    private Set<Vulnerability> mCacheContent1;
    private Set<Vulnerability> mCacheContent2;
    private Set<Vulnerability> mCacheUpdateNoNew;
    private Set<Vulnerability> mCacheUpdateAllNew;
    private Set<Vulnerability> mCacheUpdateMixed;
    private VulnerabilityCache mCache;
    private final String mTaskId1 = "ff0ab0bd-cf25-4bd1-a2f3-40194c91b7cf";
    private final String mTaskId2 = "bb1bb1bb-cf25-4bd1-a2f3-42222c91aaaf";

    private Vulnerability mockVulnerabily(int id) {
        Vulnerability v = mock(Vulnerability.class);
        when(v.getId()).thenReturn(id + "");
        return v;
    }

    @Before
    public void setUp() {
        mCacheContent1 = new HashSet<Vulnerability>();
        mCacheContent2 = new HashSet<Vulnerability>();
        mCacheUpdateNoNew = new HashSet<Vulnerability>();
        mCacheUpdateAllNew = new HashSet<Vulnerability>();
        mCacheUpdateMixed = new HashSet<Vulnerability>();

        for (int i = 0; i < mCount; i++) {
            Vulnerability v = mockVulnerabily(i);
            mCacheContent1.add(v);
            mCacheContent2.add(v);

            if (i < mCount / 2) {
                mCacheUpdateNoNew.add(v);
            }
            if (i % 2 == 0) {
                mCacheUpdateMixed.add(v);
            }
        }

        for (int i = 0; i < mCount; i++) {
            Vulnerability v = mockVulnerabily(i + 100);
            mCacheUpdateAllNew.add(v);

            if (i % 2 == 1) {
                mCacheUpdateMixed.add(v);
            }
        }

        mCache = new VulnerabilityCache();
        mCache.addToTask(mTaskId1, mCacheContent1);
    }

    @Test
    public void testIndicateOutDatedUpdateNoNew() {
        Set<Vulnerability> noneCurrent = mCache.indicateOutDated(mTaskId1,
                mCacheUpdateNoNew);

        assertEquals(mCacheContent1.size() - mCacheUpdateNoNew.size(),
                noneCurrent.size());
        assertFalse(noneCurrent.equals(mCacheUpdateNoNew));
    }

    @Test
    public void testIndicateOutDatedAllNew() {
        Set<Vulnerability> noneCurrent = mCache.indicateOutDated(mTaskId1,
                mCacheUpdateAllNew);

        assertEquals(mCache.get(mTaskId1).size(), noneCurrent.size());
        assertEquals(mCache.get(mTaskId1), noneCurrent);
    }

    @Test
    public void testIndicateOutDatedMixed() {
        Set<Vulnerability> noneCurrent = mCache.indicateOutDated(mTaskId1,
                mCacheUpdateMixed);

        assertEquals(mCache.get(mTaskId1).size() / 2, noneCurrent.size());
        for (Vulnerability v : noneCurrent) {
            assertTrue(mCache.contains(mTaskId1, v));
        }
    }

    @Test
    public void testIndicateNewAllNew() {
        Set<Vulnerability> news = mCache.indicateNew(mTaskId1, mCacheUpdateAllNew);

        assertEquals(mCacheUpdateAllNew.size(), news.size());
        assertEquals(mCacheUpdateAllNew, news);
    }

    @Test
    public void testIndicateNewNoNew() {
        Set<Vulnerability> news = mCache.indicateNew(mTaskId1, mCacheUpdateNoNew);
        assertEquals(0, news.size());
    }

    @Test
    public void testIndicateNewMixed() {
        Set<Vulnerability> news = mCache.indicateNew(mTaskId1, mCacheUpdateMixed);

        assertEquals(mCache.get(mTaskId1).size() / 2, news.size());
        for (Vulnerability v : news) {
            assertFalse(mCache.contains(mTaskId1, v));
        }
    }

    @Test
    public void testAddToTask() {
        int before = mCache.vulnerabilityCount();
        mCache.addToTask(mTaskId2, mCacheContent2);
        assertEquals(before + mCacheContent2.size(), mCache.vulnerabilityCount());
        for (Vulnerability v : mCacheContent2) {
            assertTrue(mCache.contains(mTaskId2, v));
        }
    }

    @Test
    public void testRemoveFromTask() {
        int before = mCache.vulnerabilityCount();
        mCache.removeFromTask(mTaskId1, mCacheUpdateNoNew);
        assertEquals(before - mCacheUpdateNoNew.size(),
                mCache.vulnerabilityCount());
        for (Vulnerability v : mCacheUpdateNoNew) {
            assertFalse(mCache.contains(mTaskId2, v));
        }
    }

    @Test
    public void testContains() {
        for (Vulnerability v : mCacheContent1) {
            assertTrue(mCache.contains(mTaskId1, v));
            assertFalse(mCache.contains(mTaskId2, v));
        }
    }

    @Test
    public void testVulnerabilityCount() {
        assertEquals(mCacheContent1.size(), mCache.vulnerabilityCount());
        mCache.addToTask(mTaskId2, mCacheContent2);
        assertEquals(mCacheContent1.size() + mCacheContent2.size(),
                mCache.vulnerabilityCount());
    }

}
