/*
 * #%L
 * =====================================================
 *   _____                _     ____  _   _       _   _
 *  |_   _|_ __ _   _ ___| |_  / __ \| | | | ___ | | | |
 *    | | | '__| | | / __| __|/ / _` | |_| |/ __|| |_| |
 *    | | | |  | |_| \__ \ |_| | (_| |  _  |\__ \|  _  |
 *    |_| |_|   \__,_|___/\__|\ \__,_|_| |_||___/|_| |_|
 *                             \____/
 * 
 * =====================================================
 * 
 * Hochschule Hannover
 * (University of Applied Sciences and Arts, Hannover)
 * Faculty IV, Dept. of Computer Science
 * Ricklinger Stadtweg 118, 30459 Hannover, Germany
 * 
 * Email: trust@f4-i.fh-hannover.de
 * Website: http://trust.f4.hs-hannover.de
 * 
 * This file is part of ironvas, version 0.1.7, implemented by the Trust@HsH
 * research group at the Hochschule Hannover.
 * %%
 * Copyright (C) 2011 - 2016 Trust@HsH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package de.hshannover.f4.trust.ironvas;

import java.util.HashSet;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;

import de.hshannover.f4.trust.ifmapj.channel.SSRC;
import de.hshannover.f4.trust.ifmapj.exception.IfmapErrorResult;
import de.hshannover.f4.trust.ifmapj.exception.IfmapException;
import de.hshannover.f4.trust.ifmapj.messages.PublishRequest;
import de.hshannover.f4.trust.ironvas.converter.Converter;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.anySet;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.any;
import static org.mockito.Mockito.times;

public class VulnerabilityHandlerTest {

    private VulnerabilityHandler mHandler;
    private SSRC mSsrc;
    private Converter mConverter;

    @Before
    public void setUp() {
        mSsrc = mock(SSRC.class);
        mConverter = mock(Converter.class);

        mHandler = new VulnerabilityHandler(mSsrc, mConverter,"TEST","false");
    }

    @Test
    public void testPublishEmptySets() throws IfmapErrorResult, IfmapException {
        Set<Vulnerability> news = new HashSet<Vulnerability>();
        Set<Vulnerability> outDated = new HashSet<Vulnerability>();

        mHandler.publish(news, outDated);

        verify(mConverter, never()).toUpdates(anySet());
        verify(mConverter, never()).toDeletes(anySet());

        verify(mSsrc, never()).publish(any(PublishRequest.class));
    }

    @Test
    public void testPublishEmptyNews() throws IfmapErrorResult, IfmapException {
        Set<Vulnerability> news = new HashSet<Vulnerability>();
        Set<Vulnerability> outDated = new HashSet<Vulnerability>();
        outDated.add(mock(Vulnerability.class));

        mHandler.publish(news, outDated);

        verify(mConverter, never()).toUpdates(anySet());
        verify(mConverter, times(1)).toDeletes(outDated);

        verify(mSsrc, times(1)).publish(any(PublishRequest.class));
    }

    @Test
    public void testPublishEmptyOutDated() throws IfmapErrorResult,
            IfmapException {
        Set<Vulnerability> news = new HashSet<Vulnerability>();
        Set<Vulnerability> outDated = new HashSet<Vulnerability>();
        news.add(mock(Vulnerability.class));

        mHandler.publish(news, outDated);

        verify(mConverter, times(1)).toUpdates(news);
        verify(mConverter, never()).toDeletes(anySet());

        verify(mSsrc, times(1)).publish(any(PublishRequest.class));
    }

    @Test
    public void testPublish() throws IfmapErrorResult, IfmapException {
        Set<Vulnerability> news = new HashSet<Vulnerability>();
        Set<Vulnerability> outDated = new HashSet<Vulnerability>();
        news.add(mock(Vulnerability.class));
        outDated.add(mock(Vulnerability.class));

        mHandler.publish(news, outDated);

        verify(mConverter, times(1)).toUpdates(news);
        verify(mConverter, times(1)).toDeletes(outDated);

        verify(mSsrc, times(1)).publish(any(PublishRequest.class));
    }

    @Test
    public void testUpdateCache() throws IfmapErrorResult, IfmapException {
        String taskId = "a39b37dd-0fde-4774-b557-30c12df483e6";

        Set<Vulnerability> news = new HashSet<Vulnerability>();
        Set<Vulnerability> outDated = new HashSet<Vulnerability>();

        Vulnerability newVulnerability = mock(Vulnerability.class);
        Vulnerability outDatedVulnerability = mock(Vulnerability.class);
        news.add(newVulnerability);
        outDated.add(outDatedVulnerability);

        VulnerabilityCache cache = mock(VulnerabilityCache.class);
        VulnerabilityHandler h = new VulnerabilityHandlerShunt(mSsrc, mConverter,
                cache);

        h.updateCache(taskId, news, outDated);

        verify(cache, times(1)).removeFromTask(taskId, outDated);
        verify(cache, times(1)).addToTask(taskId, news);
    }

    class VulnerabilityHandlerShunt extends VulnerabilityHandler {

        public VulnerabilityHandlerShunt(SSRC ifmap, Converter converter,
                VulnerabilityCache cache) {
            super(ifmap, converter, "TEST","false");
            this.mCache = cache;
        }

    }
}
